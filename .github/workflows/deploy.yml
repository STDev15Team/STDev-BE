name: flowfit CI/CD

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # (1) 깃 체크아웃
      - name: Check out repository
        uses: actions/checkout@v2

      # (2) ENV 파일 생성
      - name: Create env files
        run: |
          mkdir -p env
          echo "${{ secrets.ENV_VARS }}" > env/prod.env

      # (3) JDK 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      # (4) gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # (5) Gradle 빌드 (테스트 스킵)
      - name: Build with Gradle (skip tests)
        run: ./gradlew clean build -x test

      # (6) Docker 이미지 빌드
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO_NAME }}:latest .

      # (7) DockerHub 로그인
      - name: DockerHub Login
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # (8) Docker 이미지 푸시
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO_NAME }}:latest

      # (8.5) EC2에 flowfit 디렉토리 생성 (없으면 만들기)
      - name: Create directory on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            mkdir -p /home/ubuntu/flowfit  # 경로가 없으면 만들기

      # (8.6) docker-compose.yml 파일 EC2로 복사
      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "docker-compose.yml"
          target: "/home/ubuntu/flowfit"

      # (8.7) .env 파일 EC2로 복사 (환경 변수 문제 방지)
      - name: Copy .env file to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "env/prod.env"
          target: "/home/ubuntu/flowfit/.env"

      # (9) SSH로 서버 접속 후 컨테이너 실행
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /home/ubuntu/flowfit
            sudo ln -s /usr/bin/docker-compose /usr/local/bin/docker-compose || true  # 심볼릭 링크 생성 (이미 있으면 무시)
            docker compose down || true  # 기존 컨테이너 종료 (V2 스타일)
            docker image prune -a -f
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO_NAME }}:latest
            docker compose up -d  # V2 스타일로 컨테이너 실행
